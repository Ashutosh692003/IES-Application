package com.Ashutosh.utility;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import java.io.*;
import com.lowagie.text.Document;
import com.lowagie.text.*;

import jakarta.servlet.http.HttpServletResponse;
import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.CMYKColor;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.Ashutosh.repo.appEntityRepo;
import com.Ashutosh.repo.eligibilityRepo;
import com.itextpdf.text.BaseColor;
import java.awt.Color;
public class pdfGenerator {
	 
	 @Autowired
	 eligibilityRepo elRepo;
	 
	 @Autowired
	 appEntityRepo appRepo;
                             
	public boolean generateNoticePdf(HttpServletResponse resp,Integer caseNum) throws Exception {
	    ByteArrayOutputStream baos = new ByteArrayOutputStream();
	    Document document = new Document(); // Use default page size
	    PdfWriter.getInstance(document, baos);

	    document.open();

	    // Define Color Constants (adjust as needed)
	    Color titleColor = new Color(0, 32, 96); // Dark blue
	    Color nameColor = new Color(0, 0, 128); // Navy blue
	    Color bodyColor = new Color(64, 64, 64); // Dark gray
	    Color selectedColor = new Color(0, 128, 0); // Green
	    Color deniedColor = new Color(255, 0, 0); // Red

	    // Title
	    Font titleFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 20, Font.BOLD, titleColor);
	    Paragraph title = new Paragraph("Department of Health & Services - Notice", titleFont);
	    title.setAlignment(Paragraph.ALIGN_CENTER);
	    document.add(title);
	    
	    

	    // Loop through notices
	    for (NoticeInfo notice : notices) {
	        // Recipient Information
	        Paragraph recipientInfo = new Paragraph();
	        recipientInfo.add(new Phrase("Name: " + notice.getName(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, nameColor)));
	        recipientInfo.add(new Phrase("Address: " + notice.getAddress(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, bodyColor)));
	        document.add(recipientInfo);

	        // Notice Body
	        Paragraph noticeBody = new Paragraph();
	        noticeBody.add(new Phrase("This is a notice from the Department of Health & Services regarding your application for the " + notice.getPlanName() + " plan.", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, bodyColor)));

	        // Plan Selection Outcome
	        if (notice.getPlanStatus().equals("Selected")) {
	            noticeBody.add(new Phrase("\nCongratulations! Your application for the " + notice.getPlanName() + " plan has been selected.", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, selectedColor)));
	            // Add additional information (e.g., next steps)
	        } else if (notice.getPlanStatus().equals("Denied")) {
	            noticeBody.add(new Phrase("\nWe regret to inform you that your application for the " + notice.getPlanName() + " plan has not been selected this time.", FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, deniedColor)));
	            // Optionally, include denial reason
	            if (notice.getDenialReason() != null && !notice.getDenialReason().isEmpty()) {
	                noticeBody.add(new Phrase("\nReason for denial: " + notice.getDenialReason(), FontFactory.getFont(FontFactory.TIMES_ROMAN, 11)));
	            }
	        }

	        document.add(noticeBody);

	        // Add a line break between notices
	        document.add(new Phrase(" "));
	    }

	    document.close();

	    byte[] pdfBytes = baos.toByteArray();
	    resp.setContentType("application/pdf");
	    resp.setHeader("Content-Disposition", "attachment; filename=notices.pdf");
	    resp.setContentLength(pdfBytes.length);
	    resp.getOutputStream().write(pdfBytes);

	    return true;
	}
}
